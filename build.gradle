/*
 * gradle settings
 *
 */

plugins {
    id 'java'
    id 'jacoco'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    mavenCentral()
}

configurations {
    byteBuddyAgent
}

dependencies {
    implementation 'info.picocli:picocli:4.7.6'
    implementation 'com.mysql:mysql-connector-j:9.2.0'
    implementation 'com.github.spotbugs:spotbugs-annotations:4.9.3'
    testImplementation 'com.h2database:h2:2.3.232'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.11.4'
    testImplementation 'org.mockito:mockito-core:5.17.0'
    testImplementation 'org.awaitility:awaitility:4.3.0'
    testImplementation 'com.github.stefanbirkner:system-lambda:1.2.1'
    byteBuddyAgent "net.bytebuddy:byte-buddy-agent:1.17.5"
}

group = 'com.henrya.tools'
version = '1.0.4'
description = 'htcleaner - a tool to clean large tables in the database'
java.sourceCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile).configureEach {
    options.release = 11
    options.encoding = 'UTF-8'
}

test {
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
    }
    useJUnitPlatform()
    jvmArgs( "-javaagent:${ configurations.byteBuddyAgent.singleFile }" )
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        // require only html report
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/config/*"
            ])
        }))
    }
}

jacoco {
    toolVersion = "0.8.13"
}

jar {
    manifest {
        attributes "Main-Class": "com.henrya.tools.htcleaner.Application"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.register('jarWithDepenencies', Jar) {
    manifest {
        attributes "Main-Class": "com.henrya.tools.htcleaner.Application"
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}